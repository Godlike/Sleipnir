/*
* Copyright (C) 2018 by Godlike
* This code is licensed under the MIT license (MIT)
* (http://opensource.org/licenses/MIT)
*/

#ifndef SLEIPNIR_ENTITY_WORLD_HPP
#define SLEIPNIR_ENTITY_WORLD_HPP

#include <sleipnir/entity/Entity.hpp>
#include <sleipnir/entity/EntityPool.hpp>

#include <vector>

namespace sleipnir
{
namespace entity
{

/** @brief  Entity world
 *
 *  Contains all entities and provides means to filter them
 */
class World
{
public:
    //! Shortcut to collection of entities
    using Entities = std::vector<Entity>;

    World() = default;

    World(World const& other) = delete;
    World& operator=(World const& other) = delete;

    ~World() = default;

    //! Creates new entity
    Entity CreateEntity();

    //! Creates collection of entities
    Entities CreateEntities(std::size_t count);

    //! Deletes given @p entity
    void DeleteEntity(const Entity& entity);

    //! Deletes given collection of @p entities
    void DeleteEntities(Entities const& entities);

    //! Filter entities matching given component @p query
    Entities MatchEntities(component::Flags query) const;

    //! Return associated entity pool
    EntityPool& GetEntityPool() { return m_pool; }

private:
    /** @brief  Generate collection of entity objects
     *
     *  @param  collection  collection of ids generated by @ref m_pool
     *
     *  @return collection of @ref Entity objects associated with this world
     *
     *  @sa GenerateCollection()
     */
    Entities GenerateEntities(EntityPool::EntityCollection const& collection) const;

    /** @brief  Generate collection of entity ids to be used with @ref EntityPool
     *
     *  @param  entities    collection of entities asssociated with this world
     *
     *  @return collection of ids to be used with @ref EntityPool
     *
     *  @sa GenerateEntities()
     */
    static EntityPool::EntityCollection GenerateCollection(Entities const& entities);

    //! Entity pool
    EntityPool m_pool;
};

}
}

#endif // SLEIPNIR_ENTITY_WORLD_HPP
