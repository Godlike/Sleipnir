/*
* Copyright (C) 2018 by Godlike
* This code is licensed under the MIT license (MIT)
* (http://opensource.org/licenses/MIT)
*/

#ifndef SLEIPNIR_ENTITY_ENTITY_IMP
#define SLEIPNIR_ENTITY_ENTITY_IMP

#include <sleipnir/entity/Entity.hpp>

namespace sleipnir
{
namespace entity
{

template<class C, typename... Args>
    C& Entity::AddComponent(Args&&... args)
{
    C* pComponent = new C(std::forward<Args>(args)...);

    AddComponentImpl(pComponent, Component::GetId<C>());

    return *pComponent;
}

template<class C>
    C& Entity::GetComponent() const
{
    return static_cast<C&>(GetComponentImpl(Component::GetId<C>()));
}

template<class C>
    bool Entity::HasComponent() const
{
    return HasComponentImpl(Component::GetId<C>());
}

template<class C>
    void Entity::DeleteComponent()
{
    DeleteComponentImpl(Component::GetId<C>());
}

}
}

#endif // SLEIPNIR_ENTITY_ENTITY_IMP
